// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tour.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createTour = `-- name: CreateTour :one

INSERT INTO tours (
  name,
  duration,
  maxGroupSize,
  difficulty,  
  ratingAverage,
  ratingQuantity,
  price,
  summary,
  description,
  imageCover,
  startDates
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, name, slug, duration, maxgroupsize, difficulty, ratingaverage, ratingquantity, price, discount, summary, description, imagecover, createdat, startdates, secrettour
`

type CreateTourParams struct {
	Name           string
	Duration       sql.NullString
	Maxgroupsize   int32
	Difficulty     string
	Ratingaverage  sql.NullString
	Ratingquantity sql.NullInt32
	Price          int32
	Summary        string
	Description    sql.NullString
	Imagecover     sql.NullString
	Startdates     []time.Time
}

func (q *Queries) CreateTour(ctx context.Context, arg CreateTourParams) (Tour, error) {
	row := q.db.QueryRowContext(ctx, createTour,
		arg.Name,
		arg.Duration,
		arg.Maxgroupsize,
		arg.Difficulty,
		arg.Ratingaverage,
		arg.Ratingquantity,
		arg.Price,
		arg.Summary,
		arg.Description,
		arg.Imagecover,
		pq.Array(arg.Startdates),
	)
	var i Tour
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Duration,
		&i.Maxgroupsize,
		&i.Difficulty,
		&i.Ratingaverage,
		&i.Ratingquantity,
		&i.Price,
		&i.Discount,
		&i.Summary,
		&i.Description,
		&i.Imagecover,
		&i.Createdat,
		pq.Array(&i.Startdates),
		&i.Secrettour,
	)
	return i, err
}

const getAllTours = `-- name: GetAllTours :many
SELECT id, name, slug, duration, maxgroupsize, difficulty, ratingaverage, ratingquantity, price, discount, summary, description, imagecover, createdat, startdates, secrettour FROM tours
`

func (q *Queries) GetAllTours(ctx context.Context) ([]Tour, error) {
	rows, err := q.db.QueryContext(ctx, getAllTours)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tour
	for rows.Next() {
		var i Tour
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Duration,
			&i.Maxgroupsize,
			&i.Difficulty,
			&i.Ratingaverage,
			&i.Ratingquantity,
			&i.Price,
			&i.Discount,
			&i.Summary,
			&i.Description,
			&i.Imagecover,
			&i.Createdat,
			pq.Array(&i.Startdates),
			&i.Secrettour,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
